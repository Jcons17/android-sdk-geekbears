apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco-android'
apply plugin: 'com.github.dcendents.android-maven'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.1'
    }
}

android {
    compileSdkVersion 25
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 25

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    lintOptions {
        disable 'UnusedResources'
        abortOnError true
    }
    buildTypes {
       debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

task compositeCoverageReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec", "outputs/code-coverage/connected/*coverage.ec"
    ])
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:25.2.0'
    androidTestImplementation 'com.android.support:support-annotations:27.1.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.robolectric:robolectric:3.2.2'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
ext {
    allLicenses = ['MIT']
    bintrayName = 'smartcar-auth'
    bintrayOrg = 'smartcar'
    bintrayRepo = 'library'
    developerEmail = 'support@smartcar.com'
    developerName = 'Smartcar'
    gitUrl = 'https://github.com/smartcar/android-sdk.git'
    groupIdentifier = 'com.smartcar.sdk'
    libraryDescription = 'SDK to handle OAUTH to Smartcar from Android devices.'
    libraryVersion = '1.0.4'
    licenseName = 'MIT License'
    licenseUrl = 'https://github.com/smartcar/android-sdk/blob/master/LICENSE.md'
    siteUrl = 'https://github.com/smartcar/android-sdk'
}

install {
    repositories.mavenInstaller {
        pom.project {
            name bintrayName
            description libraryDescription
            url siteUrl

            packaging 'aar'
            groupId groupIdentifier
            artifactId bintrayName
            version libraryVersion

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }
            scm {
                connection gitUrl
                url siteUrl
            }
            developers {
                developer {
                    name developerName
                    email developerEmail
                }
            }
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = bintrayOrg
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            name = libraryVersion
            desc = libraryDescription
        }
    }
}
